#include <map>
#include <set>
#include <list>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <iomanip>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <string>
#define int long long
#define pi (3.14159265359)
#define mod 1000000007
#define int long long
#define min1 INT_MIN
#define max1 INT_MAX
using namespace std;
int powoftwonumber(int, int);
int sumofprimenumber(int);
int power(int, int);

int32_t main()
{
	int t;
	cin >> t;
	while (t--)
	{
		int a, b, c;
		cin>>a>>b>>c;
		vector<int> p, r, s;
		while (a != 0)
		{
			int k = a % 2;
			p.push_back(k);
			a = a / 2;
		}
		while (b != 0)
		{
			int k = b % 2;
			r.push_back(k);
			b = b / 2;
		}
		while (c != 0)
		{
			int k = c % 2;
			s.push_back(k);
			c = c / 2;
		}
		// for(int i=0;i<p.size();i++)
		// {
		// 	cout<<p[i]<<" ";
		// }
		// cout<<"\n";
		// cout<<"the value of a,b,c are "<<p.size()<<" "<<r.size()<<" "<<s.size()<<"\n";
		reverse(p.begin(),p.end());
		reverse(r.begin(),r.end());
		reverse(s.begin(),s.end());
		// for(int i=0;i<p.size();i++)
		// {
		// 	cout<<p[i]<<" ";
		// }
		// cout<<"\n";
		int count=0;
		if(p.size()>s.size())
		{
			int l=p.size()-s.size();
			for(int i=0;i<l;i++)
			{
				if(p[0]==1)
				count++;
				p.erase(p.begin());
				//count++;
			}
		}
		else
		{
			int l=s.size()-p.size();
			for(int i=0;i<l;i++)
			{
				p.insert(p.begin(),0);
				//count++;
			}
		}
		if(r.size()>s.size())
		{
			int l=r.size()-s.size();
			for(int i=0;i<l;i++)
			{
				if(r[0]==1)
				count++;
				r.erase(r.begin());
				//count++;
			}
		}
		else
		{
			int l=s.size()-r.size();
			for(int i=0;i<l;i++)
			{
				r.insert(r.begin(),0);
				//count++;
			}
		}
		
		for(int i=0;i<s.size();i++)
		{
			//cout<<"raj "<<s[i]<<"\n";
			if(s[i]==1)
			{
				if(r[i]==0&&p[i]==0)
				{
					count++;
					r[i]=1;
				}
			}
			else
			{
				if(r[i]==1)
				{
					count++;
					r[i]=0;
				}
				if(p[i]==1)
				{
					count++;
					p[i]=0;
				}
			}
		}
		cout<<count<<"\n";
	}
	return 0;
}

int sumofprimenumber(int N)
{
	int i, Number, count, s = 0;
	for (Number = 2; Number <= N; Number++)
	{
		count = 0;
		for (i = 2; i <= sqrt(Number); i++)
		{
			if (Number % i == 0)
			{
				count++;
				break;
			}
		}
		if (count == 0)
		{
			s = s + Number;
		}
	}
	return s;
}

int powoftwonumber(int a, int b)
{
	int res = 1;
	while (b > 0)
	{
		if ((b & 1) != 0)
		{
			res = (res % mod * a % mod) % mod;
		}
		a = (a % mod * a % mod) % mod;
		b = b >> 1;
	}
	return res;
}

int power(int x, int y)
{
	int res = 1; // Initialize result
	x = x % mod; // Update x if it is more than or // equal to p
	if (x == 0)
		return 0; // In case x is divisible by p;
	while (y > 0)
	{
		// If y is odd, multiply x with result
		if (y & 1)
			res = (res * x) % mod;
		// y must be even now
		y = y >> 1; // y = y/2
		x = (x * x) % mod;
	}
	return res;
}